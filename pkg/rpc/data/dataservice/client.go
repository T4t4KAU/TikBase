// Code generated by Kitex v0.6.2. DO NOT EDIT.

package dataservice

import (
	"context"
	data "github.com/T4t4KAU/TikBase/pkg/rpc/data"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Get(ctx context.Context, req *data.GetReq, callOptions ...callopt.Option) (r *data.GetResp, err error)
	Set(ctx context.Context, req *data.SetReq, callOptions ...callopt.Option) (r *data.SetResp, err error)
	Del(ctx context.Context, req *data.DelReq, callOptions ...callopt.Option) (r *data.DelResp, err error)
	Expire(ctx context.Context, req *data.ExpireReq, callOptions ...callopt.Option) (r *data.ExpireResp, err error)
	HSet(ctx context.Context, req *data.HSetReq, callOptions ...callopt.Option) (r *data.HSetResp, err error)
	HGet(ctx context.Context, req *data.HGetReq, callOptions ...callopt.Option) (r *data.HGetResp, err error)
	HDel(ctx context.Context, req *data.HDelReq, callOptions ...callopt.Option) (r *data.HDelResp, err error)
	LPush(ctx context.Context, req *data.LPushReq, callOptions ...callopt.Option) (r *data.LPushResp, err error)
	RPush(ctx context.Context, req *data.RPushReq, callOptions ...callopt.Option) (r *data.RPushResp, err error)
	LPop(ctx context.Context, req *data.LPopReq, callOptions ...callopt.Option) (r *data.LPopResp, err error)
	RPop(ctx context.Context, req *data.RPopReq, callOptions ...callopt.Option) (r *data.RPopResp, err error)
	SAdd(ctx context.Context, req *data.SAddReq, callOptions ...callopt.Option) (r *data.SAddResp, err error)
	SRem(ctx context.Context, req *data.SRemReq, callOptions ...callopt.Option) (r *data.SRemResp, err error)
	ZAdd(ctx context.Context, req *data.ZAddReq, callOptions ...callopt.Option) (r *data.ZAddResp, err error)
	ZRem(ctx context.Context, req *data.ZRemReq, callOptions ...callopt.Option) (r *data.ZRemResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kDataServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kDataServiceClient struct {
	*kClient
}

func (p *kDataServiceClient) Get(ctx context.Context, req *data.GetReq, callOptions ...callopt.Option) (r *data.GetResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Get(ctx, req)
}

func (p *kDataServiceClient) Set(ctx context.Context, req *data.SetReq, callOptions ...callopt.Option) (r *data.SetResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Set(ctx, req)
}

func (p *kDataServiceClient) Del(ctx context.Context, req *data.DelReq, callOptions ...callopt.Option) (r *data.DelResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Del(ctx, req)
}

func (p *kDataServiceClient) Expire(ctx context.Context, req *data.ExpireReq, callOptions ...callopt.Option) (r *data.ExpireResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Expire(ctx, req)
}

func (p *kDataServiceClient) HSet(ctx context.Context, req *data.HSetReq, callOptions ...callopt.Option) (r *data.HSetResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HSet(ctx, req)
}

func (p *kDataServiceClient) HGet(ctx context.Context, req *data.HGetReq, callOptions ...callopt.Option) (r *data.HGetResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HGet(ctx, req)
}

func (p *kDataServiceClient) HDel(ctx context.Context, req *data.HDelReq, callOptions ...callopt.Option) (r *data.HDelResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HDel(ctx, req)
}

func (p *kDataServiceClient) LPush(ctx context.Context, req *data.LPushReq, callOptions ...callopt.Option) (r *data.LPushResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LPush(ctx, req)
}

func (p *kDataServiceClient) RPush(ctx context.Context, req *data.RPushReq, callOptions ...callopt.Option) (r *data.RPushResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RPush(ctx, req)
}

func (p *kDataServiceClient) LPop(ctx context.Context, req *data.LPopReq, callOptions ...callopt.Option) (r *data.LPopResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LPop(ctx, req)
}

func (p *kDataServiceClient) RPop(ctx context.Context, req *data.RPopReq, callOptions ...callopt.Option) (r *data.RPopResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RPop(ctx, req)
}

func (p *kDataServiceClient) SAdd(ctx context.Context, req *data.SAddReq, callOptions ...callopt.Option) (r *data.SAddResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SAdd(ctx, req)
}

func (p *kDataServiceClient) SRem(ctx context.Context, req *data.SRemReq, callOptions ...callopt.Option) (r *data.SRemResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SRem(ctx, req)
}

func (p *kDataServiceClient) ZAdd(ctx context.Context, req *data.ZAddReq, callOptions ...callopt.Option) (r *data.ZAddResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ZAdd(ctx, req)
}

func (p *kDataServiceClient) ZRem(ctx context.Context, req *data.ZRemReq, callOptions ...callopt.Option) (r *data.ZRemResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ZRem(ctx, req)
}
