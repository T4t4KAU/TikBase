// Code generated by Kitex v0.6.2. DO NOT EDIT.

package dataservice

import (
	"context"
	data "github.com/T4t4KAU/TikBase/pkg/rpc/data"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return dataServiceServiceInfo
}

var dataServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "DataService"
	handlerType := (*data.DataService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Get":    kitex.NewMethodInfo(getHandler, newDataServiceGetArgs, newDataServiceGetResult, false),
		"Set":    kitex.NewMethodInfo(setHandler, newDataServiceSetArgs, newDataServiceSetResult, false),
		"Del":    kitex.NewMethodInfo(delHandler, newDataServiceDelArgs, newDataServiceDelResult, false),
		"Expire": kitex.NewMethodInfo(expireHandler, newDataServiceExpireArgs, newDataServiceExpireResult, false),
		"HSet":   kitex.NewMethodInfo(hSetHandler, newDataServiceHSetArgs, newDataServiceHSetResult, false),
		"HGet":   kitex.NewMethodInfo(hGetHandler, newDataServiceHGetArgs, newDataServiceHGetResult, false),
		"HDel":   kitex.NewMethodInfo(hDelHandler, newDataServiceHDelArgs, newDataServiceHDelResult, false),
		"LPush":  kitex.NewMethodInfo(lPushHandler, newDataServiceLPushArgs, newDataServiceLPushResult, false),
		"RPush":  kitex.NewMethodInfo(rPushHandler, newDataServiceRPushArgs, newDataServiceRPushResult, false),
		"LPop":   kitex.NewMethodInfo(lPopHandler, newDataServiceLPopArgs, newDataServiceLPopResult, false),
		"RPop":   kitex.NewMethodInfo(rPopHandler, newDataServiceRPopArgs, newDataServiceRPopResult, false),
		"SAdd":   kitex.NewMethodInfo(sAddHandler, newDataServiceSAddArgs, newDataServiceSAddResult, false),
		"SRem":   kitex.NewMethodInfo(sRemHandler, newDataServiceSRemArgs, newDataServiceSRemResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "data",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func getHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceGetArgs)
	realResult := result.(*data.DataServiceGetResult)
	success, err := handler.(data.DataService).Get(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceGetArgs() interface{} {
	return data.NewDataServiceGetArgs()
}

func newDataServiceGetResult() interface{} {
	return data.NewDataServiceGetResult()
}

func setHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceSetArgs)
	realResult := result.(*data.DataServiceSetResult)
	success, err := handler.(data.DataService).Set(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceSetArgs() interface{} {
	return data.NewDataServiceSetArgs()
}

func newDataServiceSetResult() interface{} {
	return data.NewDataServiceSetResult()
}

func delHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceDelArgs)
	realResult := result.(*data.DataServiceDelResult)
	success, err := handler.(data.DataService).Del(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceDelArgs() interface{} {
	return data.NewDataServiceDelArgs()
}

func newDataServiceDelResult() interface{} {
	return data.NewDataServiceDelResult()
}

func expireHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceExpireArgs)
	realResult := result.(*data.DataServiceExpireResult)
	success, err := handler.(data.DataService).Expire(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceExpireArgs() interface{} {
	return data.NewDataServiceExpireArgs()
}

func newDataServiceExpireResult() interface{} {
	return data.NewDataServiceExpireResult()
}

func hSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceHSetArgs)
	realResult := result.(*data.DataServiceHSetResult)
	success, err := handler.(data.DataService).HSet(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceHSetArgs() interface{} {
	return data.NewDataServiceHSetArgs()
}

func newDataServiceHSetResult() interface{} {
	return data.NewDataServiceHSetResult()
}

func hGetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceHGetArgs)
	realResult := result.(*data.DataServiceHGetResult)
	success, err := handler.(data.DataService).HGet(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceHGetArgs() interface{} {
	return data.NewDataServiceHGetArgs()
}

func newDataServiceHGetResult() interface{} {
	return data.NewDataServiceHGetResult()
}

func hDelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceHDelArgs)
	realResult := result.(*data.DataServiceHDelResult)
	success, err := handler.(data.DataService).HDel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceHDelArgs() interface{} {
	return data.NewDataServiceHDelArgs()
}

func newDataServiceHDelResult() interface{} {
	return data.NewDataServiceHDelResult()
}

func lPushHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceLPushArgs)
	realResult := result.(*data.DataServiceLPushResult)
	success, err := handler.(data.DataService).LPush(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceLPushArgs() interface{} {
	return data.NewDataServiceLPushArgs()
}

func newDataServiceLPushResult() interface{} {
	return data.NewDataServiceLPushResult()
}

func rPushHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceRPushArgs)
	realResult := result.(*data.DataServiceRPushResult)
	success, err := handler.(data.DataService).RPush(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceRPushArgs() interface{} {
	return data.NewDataServiceRPushArgs()
}

func newDataServiceRPushResult() interface{} {
	return data.NewDataServiceRPushResult()
}

func lPopHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceLPopArgs)
	realResult := result.(*data.DataServiceLPopResult)
	success, err := handler.(data.DataService).LPop(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceLPopArgs() interface{} {
	return data.NewDataServiceLPopArgs()
}

func newDataServiceLPopResult() interface{} {
	return data.NewDataServiceLPopResult()
}

func rPopHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceRPopArgs)
	realResult := result.(*data.DataServiceRPopResult)
	success, err := handler.(data.DataService).RPop(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceRPopArgs() interface{} {
	return data.NewDataServiceRPopArgs()
}

func newDataServiceRPopResult() interface{} {
	return data.NewDataServiceRPopResult()
}

func sAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceSAddArgs)
	realResult := result.(*data.DataServiceSAddResult)
	success, err := handler.(data.DataService).SAdd(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceSAddArgs() interface{} {
	return data.NewDataServiceSAddArgs()
}

func newDataServiceSAddResult() interface{} {
	return data.NewDataServiceSAddResult()
}

func sRemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*data.DataServiceSRemArgs)
	realResult := result.(*data.DataServiceSRemResult)
	success, err := handler.(data.DataService).SRem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDataServiceSRemArgs() interface{} {
	return data.NewDataServiceSRemArgs()
}

func newDataServiceSRemResult() interface{} {
	return data.NewDataServiceSRemResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Get(ctx context.Context, req *data.GetReq) (r *data.GetResp, err error) {
	var _args data.DataServiceGetArgs
	_args.Req = req
	var _result data.DataServiceGetResult
	if err = p.c.Call(ctx, "Get", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Set(ctx context.Context, req *data.SetReq) (r *data.SetResp, err error) {
	var _args data.DataServiceSetArgs
	_args.Req = req
	var _result data.DataServiceSetResult
	if err = p.c.Call(ctx, "Set", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Del(ctx context.Context, req *data.DelReq) (r *data.DelResp, err error) {
	var _args data.DataServiceDelArgs
	_args.Req = req
	var _result data.DataServiceDelResult
	if err = p.c.Call(ctx, "Del", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Expire(ctx context.Context, req *data.ExpireReq) (r *data.ExpireResp, err error) {
	var _args data.DataServiceExpireArgs
	_args.Req = req
	var _result data.DataServiceExpireResult
	if err = p.c.Call(ctx, "Expire", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HSet(ctx context.Context, req *data.HSetReq) (r *data.HSetResp, err error) {
	var _args data.DataServiceHSetArgs
	_args.Req = req
	var _result data.DataServiceHSetResult
	if err = p.c.Call(ctx, "HSet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HGet(ctx context.Context, req *data.HGetReq) (r *data.HGetResp, err error) {
	var _args data.DataServiceHGetArgs
	_args.Req = req
	var _result data.DataServiceHGetResult
	if err = p.c.Call(ctx, "HGet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HDel(ctx context.Context, req *data.HDelReq) (r *data.HDelResp, err error) {
	var _args data.DataServiceHDelArgs
	_args.Req = req
	var _result data.DataServiceHDelResult
	if err = p.c.Call(ctx, "HDel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LPush(ctx context.Context, req *data.LPushReq) (r *data.LPushResp, err error) {
	var _args data.DataServiceLPushArgs
	_args.Req = req
	var _result data.DataServiceLPushResult
	if err = p.c.Call(ctx, "LPush", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RPush(ctx context.Context, req *data.RPushReq) (r *data.RPushResp, err error) {
	var _args data.DataServiceRPushArgs
	_args.Req = req
	var _result data.DataServiceRPushResult
	if err = p.c.Call(ctx, "RPush", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LPop(ctx context.Context, req *data.LPopReq) (r *data.LPopResp, err error) {
	var _args data.DataServiceLPopArgs
	_args.Req = req
	var _result data.DataServiceLPopResult
	if err = p.c.Call(ctx, "LPop", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RPop(ctx context.Context, req *data.RPopReq) (r *data.RPopResp, err error) {
	var _args data.DataServiceRPopArgs
	_args.Req = req
	var _result data.DataServiceRPopResult
	if err = p.c.Call(ctx, "RPop", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SAdd(ctx context.Context, req *data.SAddReq) (r *data.SAddResp, err error) {
	var _args data.DataServiceSAddArgs
	_args.Req = req
	var _result data.DataServiceSAddResult
	if err = p.c.Call(ctx, "SAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SRem(ctx context.Context, req *data.SRemReq) (r *data.SRemResp, err error) {
	var _args data.DataServiceSRemArgs
	_args.Req = req
	var _result data.DataServiceSRemResult
	if err = p.c.Call(ctx, "SRem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
