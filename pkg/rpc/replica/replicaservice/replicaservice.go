// Code generated by Kitex v0.6.2. DO NOT EDIT.

package replicaservice

import (
	"context"
	replica "github.com/T4t4KAU/TikBase/pkg/rpc/replica"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return replicaServiceServiceInfo
}

var replicaServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ReplicaService"
	handlerType := (*replica.ReplicaService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Join":       kitex.NewMethodInfo(joinHandler, newReplicaServiceJoinArgs, newReplicaServiceJoinResult, false),
		"LeaderAddr": kitex.NewMethodInfo(leaderAddrHandler, newReplicaServiceLeaderAddrArgs, newReplicaServiceLeaderAddrResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "replica",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func joinHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*replica.ReplicaServiceJoinArgs)
	realResult := result.(*replica.ReplicaServiceJoinResult)
	success, err := handler.(replica.ReplicaService).Join(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newReplicaServiceJoinArgs() interface{} {
	return replica.NewReplicaServiceJoinArgs()
}

func newReplicaServiceJoinResult() interface{} {
	return replica.NewReplicaServiceJoinResult()
}

func leaderAddrHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*replica.ReplicaServiceLeaderAddrArgs)
	realResult := result.(*replica.ReplicaServiceLeaderAddrResult)
	success, err := handler.(replica.ReplicaService).LeaderAddr(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newReplicaServiceLeaderAddrArgs() interface{} {
	return replica.NewReplicaServiceLeaderAddrArgs()
}

func newReplicaServiceLeaderAddrResult() interface{} {
	return replica.NewReplicaServiceLeaderAddrResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Join(ctx context.Context, req *replica.JoinReq) (r *replica.JoinResp, err error) {
	var _args replica.ReplicaServiceJoinArgs
	_args.Req = req
	var _result replica.ReplicaServiceJoinResult
	if err = p.c.Call(ctx, "Join", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LeaderAddr(ctx context.Context, req *replica.LeaderAddrReq) (r *replica.LeaderAddrResp, err error) {
	var _args replica.ReplicaServiceLeaderAddrArgs
	_args.Req = req
	var _result replica.ReplicaServiceLeaderAddrResult
	if err = p.c.Call(ctx, "LeaderAddr", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
