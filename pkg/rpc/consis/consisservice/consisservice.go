// Code generated by Kitex v0.6.2. DO NOT EDIT.

package consisservice

import (
	"context"
	consis "github.com/T4t4KAU/TikBase/pkg/rpc/consis"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return consisServiceServiceInfo
}

var consisServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ConsisService"
	handlerType := (*consis.ConsisService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Join": kitex.NewMethodInfo(joinHandler, newConsisServiceJoinArgs, newConsisServiceJoinResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "consis",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func joinHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*consis.ConsisServiceJoinArgs)
	realResult := result.(*consis.ConsisServiceJoinResult)
	success, err := handler.(consis.ConsisService).Join(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newConsisServiceJoinArgs() interface{} {
	return consis.NewConsisServiceJoinArgs()
}

func newConsisServiceJoinResult() interface{} {
	return consis.NewConsisServiceJoinResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Join(ctx context.Context, req *consis.JoinReq) (r *consis.JoinResp, err error) {
	var _args consis.ConsisServiceJoinArgs
	_args.Req = req
	var _result consis.ConsisServiceJoinResult
	if err = p.c.Call(ctx, "Join", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
