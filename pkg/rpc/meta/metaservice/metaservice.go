// Code generated by Kitex v0.6.2. DO NOT EDIT.

package metaservice

import (
	"context"
	meta "github.com/T4t4KAU/TikBase/pkg/rpc/meta"
	meta0 "github.com/T4t4KAU/TikBase/pkg/rpc/meta"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return metaServiceServiceInfo
}

var metaServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MetaService"
	handlerType := (*meta.MetaService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RegionList":   kitex.NewMethodInfo(regionListHandler, newMetaServiceRegionListArgs, newMetaServiceRegionListResult, false),
		"RegionStatus": kitex.NewMethodInfo(regionStatusHandler, newMetaServiceRegionStatusArgs, newMetaServiceRegionStatusResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "meta",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func regionListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*meta.MetaServiceRegionListArgs)
	realResult := result.(*meta.MetaServiceRegionListResult)
	success, err := handler.(meta.MetaService).RegionList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMetaServiceRegionListArgs() interface{} {
	return meta.NewMetaServiceRegionListArgs()
}

func newMetaServiceRegionListResult() interface{} {
	return meta.NewMetaServiceRegionListResult()
}

func regionStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*meta.MetaServiceRegionStatusArgs)
	realResult := result.(*meta.MetaServiceRegionStatusResult)
	success, err := handler.(meta.MetaService).RegionStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMetaServiceRegionStatusArgs() interface{} {
	return meta.NewMetaServiceRegionStatusArgs()
}

func newMetaServiceRegionStatusResult() interface{} {
	return meta.NewMetaServiceRegionStatusResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RegionList(ctx context.Context, req *meta0.RegionListReq) (r *meta0.RegionListResp, err error) {
	var _args meta.MetaServiceRegionListArgs
	_args.Req = req
	var _result meta.MetaServiceRegionListResult
	if err = p.c.Call(ctx, "RegionList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegionStatus(ctx context.Context, req *meta0.RegionStatusReq) (r *meta0.RegionStatusResp, err error) {
	var _args meta.MetaServiceRegionStatusArgs
	_args.Req = req
	var _result meta.MetaServiceRegionStatusResult
	if err = p.c.Call(ctx, "RegionStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
